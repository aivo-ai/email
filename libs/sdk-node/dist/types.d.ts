/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
export interface paths {
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Authenticate user */
        post: operations["login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Refresh access token */
        post: operations["refreshToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get current user profile */
        get: operations["getCurrentUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/mail/messages:list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** List email messages */
        post: operations["listMessages"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/mail/messages:get": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get email message */
        post: operations["getMessage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/mail/send": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send email message */
        post: operations["sendMessage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/deliverability/dmarc-reports:summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get DMARC reports summary */
        post: operations["getDmarcSummary"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/policy/trusted-senders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List trusted senders */
        get: operations["listTrustedSenders"];
        put?: never;
        /** Add trusted sender */
        post: operations["addTrustedSender"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        User: {
            id: string;
            /** Format: email */
            email: string;
            displayName: string;
            /** Format: uri */
            avatarUrl?: string;
            isActive: boolean;
            /** Format: date-time */
            lastLoginAt?: string;
            /** Format: date-time */
            createdAt?: string;
        };
        Message: {
            id: string;
            threadId: string;
            labelIds: string[];
            snippet: string;
            sizeEstimate: number;
            historyId?: string;
            /** Format: date-time */
            internalDate?: string;
            payload?: {
                partId?: string;
                mimeType?: string;
                filename?: string;
                headers?: {
                    name: string;
                    value: string;
                }[];
                body?: {
                    size?: number;
                    /** Format: byte */
                    data?: string;
                };
                parts?: components["schemas"]["MessagePart"][];
            };
        };
        MessagePart: {
            partId?: string;
            mimeType?: string;
            filename?: string;
            headers?: {
                name: string;
                value: string;
            }[];
            body?: {
                size?: number;
                /** Format: byte */
                data?: string;
            };
        };
        Label: {
            id: string;
            name: string;
            /** @enum {string} */
            type: "system" | "user";
            /** @enum {string} */
            messageListVisibility?: "show" | "hide";
            /** @enum {string} */
            labelListVisibility?: "labelShow" | "labelShowIfUnread" | "labelHide";
            messagesTotal?: number;
            messagesUnread?: number;
            threadsTotal?: number;
            threadsUnread?: number;
        };
        SendRequest: {
            to: {
                /** Format: email */
                email: string;
                name?: string;
            }[];
            cc?: {
                /** Format: email */
                email: string;
                name?: string;
            }[];
            bcc?: {
                /** Format: email */
                email: string;
                name?: string;
            }[];
            subject: string;
            textBody?: string;
            htmlBody?: string;
            attachments?: {
                filename: string;
                /** Format: byte */
                data: string;
                mimeType: string;
                size?: number;
            }[];
            replyTo?: {
                /** Format: email */
                email?: string;
                name?: string;
            };
            threadId?: string;
        };
        Error: {
            error: string;
            message: string;
            code?: number;
            details?: Record<string, never>;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** Format: email */
                    email: string;
                    password: string;
                };
            };
        };
        responses: {
            /** @description Login successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        accessToken: string;
                        refreshToken: string;
                        user: components["schemas"]["User"];
                    };
                };
            };
            /** @description Invalid credentials */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    refreshToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    refreshToken: string;
                };
            };
        };
        responses: {
            /** @description Token refreshed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        accessToken: string;
                    };
                };
            };
            /** @description Invalid refresh token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getCurrentUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User profile */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    listMessages: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    labelIds?: string[];
                    query?: string;
                    /** @default 20 */
                    pageSize?: number;
                    pageToken?: string;
                };
            };
        };
        responses: {
            /** @description Messages list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        messages: components["schemas"]["Message"][];
                        nextPageToken?: string;
                        resultSizeEstimate: number;
                    };
                };
            };
        };
    };
    getMessage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    id: string;
                    /**
                     * @default full
                     * @enum {string}
                     */
                    format?: "minimal" | "full" | "raw" | "metadata";
                };
            };
        };
        responses: {
            /** @description Message details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Message"];
                };
            };
            /** @description Message not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    sendMessage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SendRequest"];
            };
        };
        responses: {
            /** @description Message sent */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id: string;
                        threadId: string;
                        labelIds?: string[];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getDmarcSummary: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** Format: date */
                    startDate?: string;
                    /** Format: date */
                    endDate?: string;
                    /**
                     * @default day
                     * @enum {string}
                     */
                    aggregateBy?: "day" | "week" | "month";
                };
            };
        };
        responses: {
            /** @description DMARC summary */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        summary: {
                            /** Format: date */
                            date: string;
                            passed: number;
                            failed: number;
                            total: number;
                        }[];
                        totalMessages: number;
                        /** Format: float */
                        passRate: number;
                    };
                };
            };
        };
    };
    listTrustedSenders: {
        parameters: {
            query?: {
                pageSize?: number;
                pageToken?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Trusted senders list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        senders: {
                            /** Format: email */
                            email: string;
                            displayName?: string;
                            /** Format: date-time */
                            addedAt: string;
                            addedBy?: string;
                        }[];
                        nextPageToken?: string;
                    };
                };
            };
        };
    };
    addTrustedSender: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** Format: email */
                    email: string;
                    displayName?: string;
                };
            };
        };
        responses: {
            /** @description Trusted sender added */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        success: boolean;
                    };
                };
            };
        };
    };
}
//# sourceMappingURL=types.d.ts.map