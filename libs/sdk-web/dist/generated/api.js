/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Ceerion Email Platform API
 * Email platform API for mail.ceerion.com
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import { customInstance } from '../http-client';
/**
 * @summary Authenticate user
 */
export const login = (loginBody, options, signal) => {
    return customInstance({ url: `/auth/login`, method: 'POST',
        headers: { 'Content-Type': 'application/json', },
        data: loginBody, signal
    }, options);
};
export const getLoginMutationOptions = (options) => {
    const mutationKey = ['login'];
    const { mutation: mutationOptions, request: requestOptions } = options ?
        options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
            options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey, }, request: undefined };
    const mutationFn = (props) => {
        const { data } = props ?? {};
        return login(data, requestOptions);
    };
    return { mutationFn, ...mutationOptions };
};
/**
* @summary Authenticate user
*/
export const useLogin = (options, queryClient) => {
    const mutationOptions = getLoginMutationOptions(options);
    return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Refresh access token
 */
export const refreshToken = (refreshTokenBody, options, signal) => {
    return customInstance({ url: `/auth/refresh`, method: 'POST',
        headers: { 'Content-Type': 'application/json', },
        data: refreshTokenBody, signal
    }, options);
};
export const getRefreshTokenMutationOptions = (options) => {
    const mutationKey = ['refreshToken'];
    const { mutation: mutationOptions, request: requestOptions } = options ?
        options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
            options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey, }, request: undefined };
    const mutationFn = (props) => {
        const { data } = props ?? {};
        return refreshToken(data, requestOptions);
    };
    return { mutationFn, ...mutationOptions };
};
/**
* @summary Refresh access token
*/
export const useRefreshToken = (options, queryClient) => {
    const mutationOptions = getRefreshTokenMutationOptions(options);
    return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get current user profile
 */
export const getCurrentUser = (options, signal) => {
    return customInstance({ url: `/users/me`, method: 'GET', signal
    }, options);
};
export const getGetCurrentUserQueryKey = () => {
    return [`/users/me`];
};
export const getGetCurrentUserQueryOptions = (options) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};
    const queryKey = queryOptions?.queryKey ?? getGetCurrentUserQueryKey();
    const queryFn = ({ signal }) => getCurrentUser(requestOptions, signal);
    return { queryKey, queryFn, ...queryOptions };
};
/**
 * @summary Get current user profile
 */
export function useGetCurrentUser(options, queryClient) {
    const queryOptions = getGetCurrentUserQueryOptions(options);
    const query = useQuery(queryOptions, queryClient);
    query.queryKey = queryOptions.queryKey;
    return query;
}
/**
 * @summary List email messages
 */
export const listMessages = (listMessagesBody, options, signal) => {
    return customInstance({ url: `/mail/messages:list`, method: 'POST',
        headers: { 'Content-Type': 'application/json', },
        data: listMessagesBody, signal
    }, options);
};
export const getListMessagesMutationOptions = (options) => {
    const mutationKey = ['listMessages'];
    const { mutation: mutationOptions, request: requestOptions } = options ?
        options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
            options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey, }, request: undefined };
    const mutationFn = (props) => {
        const { data } = props ?? {};
        return listMessages(data, requestOptions);
    };
    return { mutationFn, ...mutationOptions };
};
/**
* @summary List email messages
*/
export const useListMessages = (options, queryClient) => {
    const mutationOptions = getListMessagesMutationOptions(options);
    return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get email message
 */
export const getMessage = (getMessageBody, options, signal) => {
    return customInstance({ url: `/mail/messages:get`, method: 'POST',
        headers: { 'Content-Type': 'application/json', },
        data: getMessageBody, signal
    }, options);
};
export const getGetMessageMutationOptions = (options) => {
    const mutationKey = ['getMessage'];
    const { mutation: mutationOptions, request: requestOptions } = options ?
        options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
            options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey, }, request: undefined };
    const mutationFn = (props) => {
        const { data } = props ?? {};
        return getMessage(data, requestOptions);
    };
    return { mutationFn, ...mutationOptions };
};
/**
* @summary Get email message
*/
export const useGetMessage = (options, queryClient) => {
    const mutationOptions = getGetMessageMutationOptions(options);
    return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Send email message
 */
export const sendMessage = (sendRequest, options, signal) => {
    return customInstance({ url: `/mail/send`, method: 'POST',
        headers: { 'Content-Type': 'application/json', },
        data: sendRequest, signal
    }, options);
};
export const getSendMessageMutationOptions = (options) => {
    const mutationKey = ['sendMessage'];
    const { mutation: mutationOptions, request: requestOptions } = options ?
        options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
            options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey, }, request: undefined };
    const mutationFn = (props) => {
        const { data } = props ?? {};
        return sendMessage(data, requestOptions);
    };
    return { mutationFn, ...mutationOptions };
};
/**
* @summary Send email message
*/
export const useSendMessage = (options, queryClient) => {
    const mutationOptions = getSendMessageMutationOptions(options);
    return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get DMARC reports summary
 */
export const getDmarcSummary = (getDmarcSummaryBody, options, signal) => {
    return customInstance({ url: `/deliverability/dmarc-reports:summary`, method: 'POST',
        headers: { 'Content-Type': 'application/json', },
        data: getDmarcSummaryBody, signal
    }, options);
};
export const getGetDmarcSummaryMutationOptions = (options) => {
    const mutationKey = ['getDmarcSummary'];
    const { mutation: mutationOptions, request: requestOptions } = options ?
        options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
            options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey, }, request: undefined };
    const mutationFn = (props) => {
        const { data } = props ?? {};
        return getDmarcSummary(data, requestOptions);
    };
    return { mutationFn, ...mutationOptions };
};
/**
* @summary Get DMARC reports summary
*/
export const useGetDmarcSummary = (options, queryClient) => {
    const mutationOptions = getGetDmarcSummaryMutationOptions(options);
    return useMutation(mutationOptions, queryClient);
};
/**
 * @summary List trusted senders
 */
export const listTrustedSenders = (params, options, signal) => {
    return customInstance({ url: `/policy/trusted-senders`, method: 'GET',
        params, signal
    }, options);
};
export const getListTrustedSendersQueryKey = (params) => {
    return [`/policy/trusted-senders`, ...(params ? [params] : [])];
};
export const getListTrustedSendersQueryOptions = (params, options) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};
    const queryKey = queryOptions?.queryKey ?? getListTrustedSendersQueryKey(params);
    const queryFn = ({ signal }) => listTrustedSenders(params, requestOptions, signal);
    return { queryKey, queryFn, ...queryOptions };
};
/**
 * @summary List trusted senders
 */
export function useListTrustedSenders(params, options, queryClient) {
    const queryOptions = getListTrustedSendersQueryOptions(params, options);
    const query = useQuery(queryOptions, queryClient);
    query.queryKey = queryOptions.queryKey;
    return query;
}
/**
 * @summary Add trusted sender
 */
export const addTrustedSender = (addTrustedSenderBody, options, signal) => {
    return customInstance({ url: `/policy/trusted-senders`, method: 'POST',
        headers: { 'Content-Type': 'application/json', },
        data: addTrustedSenderBody, signal
    }, options);
};
export const getAddTrustedSenderMutationOptions = (options) => {
    const mutationKey = ['addTrustedSender'];
    const { mutation: mutationOptions, request: requestOptions } = options ?
        options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
            options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey, }, request: undefined };
    const mutationFn = (props) => {
        const { data } = props ?? {};
        return addTrustedSender(data, requestOptions);
    };
    return { mutationFn, ...mutationOptions };
};
/**
* @summary Add trusted sender
*/
export const useAddTrustedSender = (options, queryClient) => {
    const mutationOptions = getAddTrustedSenderMutationOptions(options);
    return useMutation(mutationOptions, queryClient);
};
//# sourceMappingURL=api.js.map